import {
  createAsyncThunk,
  createSlice,
  PayloadAction
} from '@reduxjs/toolkit'
import type {
  RootState,
  AppThunk
} from '../../store'
import {
  fetchExpenses
} from '../../api/index'

// Define a type for the slice state
interface ExpenseState {
  total: number,
  totalWithTaxes: number,
  expenses: any[],
  status: string
}

// Define the initial state using that type
const initialState: ExpenseState = {
  total: 0,
  totalWithTaxes: 0,
  expenses: [],
  status: 'idle'
}

export const fetchAllExpenses = createAsyncThunk(
  'expense/fetchExpenses',
  async () => {
    const response = await fetchExpenses()
    // Value returned on `fulfilled` action payload
    return response.data
  }
)

export const expenseSlice = createSlice({
  name: 'expense',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    newTotal: (state, action: PayloadAction<number>) => {
      state.total = action.payload
    },

    newTotalWithTaxes: (state, action: PayloadAction<number>) => {
      state.totalWithTaxes = action.payload
    },

    addExpenseToList: (state, action: PayloadAction<any>) => {
      state.expenses = [...state.expenses, action.payload]
    },

    // removeExpenseFromList: (state, action: PayloadAction<string>) => {
      
    // }
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllExpenses.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchAllExpenses.fulfilled, (state, action) => {
        state.status = 'idle'
        state.expenses = action.payload
      })
      .addCase(fetchAllExpenses.rejected, (state) => {
        state.status = 'failed'
      });
  },
})

export const {
  newTotal,
  newTotalWithTaxes,
  addExpenseToList
} = expenseSlice.actions

// Other code such as selectors can use the imported `RootState` type
export const selectTotal = (state: RootState) => state.expenses.total
export const selectTotalWithTaxes = (state: RootState) => state.expenses.totalWithTaxes
export const selectExpenseList = (state: RootState) => state.expenses.expenses

export default expenseSlice.reducer